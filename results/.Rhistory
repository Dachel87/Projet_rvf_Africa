library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Distances phylogénétiques (UPGMA daté)", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Optionnel : sauvegarder la heatmap en PNG
ggsave("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/heatmap_distances_phylo.png", width = 10, height = 8, dpi = 300)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "phylogenetic distance", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Optionnel : sauvegarder la heatmap en PNG
ggsave("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/heatmap_distances_phylo.png", width = 10, height = 8, dpi = 300)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "phylogenetic distance", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
# Optionnel : sauvegarder la heatmap en PNG
ggsave("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/heatmap_distances_phylo.png", width = 10, height = 8, dpi = 300)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "phylogenetic distance", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Optionnel : sauvegarder la heatmap en PNG
ggsave("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/heatmap_distances_phylo.png", width = 10, height = 8, dpi = 300)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/sequences_filtrees.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
version
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
alignment <- read.dna("/home/lnsp/Bureau/Ana_reich/sequence_aln.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "phylogenetic distance", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
alignment <- read.dna("/home/lnsp/Bureau/Ana_reich/sequence_aln.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
alignment <- read.dna("/home/lnsp/Bureau/Ana_reich/sequence_aln.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
library(ape)
library(phangorn)
library(ggtree)
library(lubridate)
# Lire le fichier contenant les dates et les régions
metadata <- read.csv("/home/lnsp/Bureau/Alignement_cladeIIb/Phylo_final/dates.csv", stringsAsFactors = FALSE)
# Convertir les dates en format décimal
metadata$decimal_date <- decimal_date(ymd(metadata$date))
# Créer le vecteur de dates nommées pour 'treedater'
sampling_dates <- setNames(metadata$decimal_date, metadata$id)
alignment <- read.dna("/home/lnsp/Bureau/Ana_reich/sequence_aln.fasta", format = "fasta")
dist_matrix <- dist.dna(alignment, model = "raw")
# Ajuster les marges : (bas, gauche, haut, droite)
par(mar = c(5, 4, 4, 2) + 0.1)
# Fermer le fichier
dev.off()
tree_upgma$edge.length[tree_upgma$edge.length < 0] <- 0.000001
tree_dated <- chronos(tree_upgma)
# Appliquer chronos sur l’arbre UPGMA
tree_dated <- chronos(tree_upgma)
plot(tree_dated, main = "Arbre daté (chronos)")
axisPhylo(backward = FALSE)  # Affiche l’échelle temporelle
# Afficher l’arbre daté
plot(tree_dated,  main = "Arbre daté (chronos)", show.tip.label = TRUE)
axisPhylo(backward = FALSE)  # Ajoute l’échelle temporelle en bas
nodelabels(pch = 21, bg = "lightblue", cex =1.2)
add.scale.bar(x = 2, y = -1, length = 0.01, cex = 0.8, lwd = 2)
tiplabels(pch = 19, col = "black", cex = 0.5)
# ====== 1. Distances phylogénétiques ======
library(reshape2)
library(ggplot2)
# Calculer les distances entre tips de l’arbre daté
dist_phylo <- cophenetic(tree_dated)
# Transformer la matrice en data.frame pour ggplot
dist_df <- melt(as.matrix(dist_phylo))
# Créer la heatmap
ggplot(dist_df, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "phylogenetic distance", x = "", y = "", fill = "Distance") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Optionnel : sauvegarder la heatmap en PNG
ggsave("/home/lnsp/Bureau/Ana_reich/heatmap_distances_phylo.png", width = 10, height = 8, dpi = 300)
# Import the data set
patients_data <- read.csv("50_patients.csv", stringsAsFactors = TRUE)
head(patients_data)
print(patients_data)
# View structure - View
str(patients_data)
# View structure - View
str(patients_data)
View structure - summary()
setwd("~/Bureau/training_ghana/Projet_rvf_Africa/results")
```
# Chargement des bibliothèques
library(tidyverse)
library(tidyverse)
# Chargement des bibliothèques
library(tidyverse)
# Chargement des bibliothèques
install.packages("tidyverse")
install.packages(c('googledrive', 'googlesheets4', 'httr', 'ragg', 'rvest'))
install.packages("tidyverse")
last_error <- tail(readLines("/tmp/Rtmp3X2XOj/downloaded_packages"), 20)
library(tidyverse)
install.packages("curl")
library(tidyverse)
library(tidyverse)
install.packages("curl")
sudo apt-get update
library(tidyverse)
sudo apt-get install r-base
library(tidyverse)
sudo apt-get install r-base
library(tidyverse)
sudo apt install r-base
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
remotes::install_github("tidyverse/tidyverse")
remotes::install_github("tidyverse/tidyverse")
remotes::install_github("tidyverse/tidyverse")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
install.packages("remotes")
remotes::install_github("tidyverse/tidyverse")
library(tidyverse)
setwd("~/Bureau/training_ghana/Projet_rvf_Africa/results")
library(dplyr)
library(readr)
# Charger les données
data <- read_csv("/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv")
# Charger les données
data <- read_csv("/home/lnsp/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv")
View(data)
# Charger les données
data <- read_tsv("/home/lnsp/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv")
View(data)
cleaned_data <- data %>%
filter(!is.na(collection_date) & !is.na(country))
cleaned_data <- data %>%
filter(!is.na(CollectionDate) & !is.na(Country))
View(cleaned_data)
sum(!is.na(data$CollectionDate))
sum(!is.na(data$Country))
cleaned_data <- data %>%
filter(!is.na(CollectionDate) & CollectionDate != "",
!is.na(Country) & Country != "")
um(!is.na(data$CollectionDate))
cleaned_data <- data %>%
filter(!is.na(CollectionDate), CollectionDate != "",
!is.na(Country), Country != "")
cleaned_data <- data %>%
filter(!is.na(CollectionDate), CollectionDate != "",
!is.na(Country), Country != "")
View(cleaned_data)
cleaned_data <- data %>%
filter(trimws(CollectionDate) != "",
trimws(Country) != "")
colnames(data)
colnames(data)
# Vérifier si ce sont des NA purs ou des chaînes vides
table(is.na(data$Country))  # TRUE = NA, FALSE = non-NA
table(data$Country, useNA = "ifany")  # Voir les valeurs présentes
table(is.na(data$CollectionDate))
table(data$CollectionDate, useNA = "ifany")
library(dplyr)
library(readr)
library(readr)
# Charger les données
data <- read_tsv("/home/lnsp/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv",
col_types = cols(.default = col_character()))
library(dplyr)
library(readr)
library(readr)
# Charger les données
data <- read_tsv("/home/lnsp/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv",
col_types = cols(.default = col_character()))
total_records <- nrow(data)
data <- read_csv("your_data.csv")
cleaned_data <- data %>%
filter(!is.na(collection_date), !is.na(country))
View(data)
cleaned_data <- data %>%
filter(!is.na(CollectionDate), !is.na(Country))
# Sauvegarder les données filtrées
write_csv(cleaned_data, "filtered_data.csv")
sum(is.na(data$collection_date))
sum(is.na(data$country))
um(is.na(data$CollectionDate))
sum(is.na(data$CollectionDate))
sum(is.na(data$Country))
nrow(data)
head(data)
data_clean <- data %>% select(where(~ sum(is.na(.)) < nrow(data)))
library(dplyr)
library(readr)
library(readr)
# Charger les données
data <- read_tsv("/home/lnsp/Bureau/training_ghana/Projet_rvf_Africa/results/metadata_clean.tsv",
col_types = cols(.default = col_character()))
View(data)
cleaned_data <- data %>%
filter(!is.na(CollectionDate), !is.na(Country))
data_clean <- data %>% select(where(~ sum(is.na(.)) < nrow(data)))
write.csv(data_clean, "cleaned_data.csv", row.names = FALSE)
View(data_clean)
View(cleaned_data)
summary_by_country_year_segment <- data_clean %>%
group_by(country, collection_year, segment) %>%
summarise(num_sequences = n(), .groups = "drop")
summary_by_country_year_segment <- data %>%
group_by(country, collection_year, segment) %>%
summarise(num_sequences = n(), .groups = "drop")
